<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Quarkus: Modernize “helloworld” JBoss EAP quickstart, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/E8UX05Gow4M/" /><category term="Java" /><category term="Quarkus" /><category term="performance" /><author><name>Marco Rizzi</name></author><id>https://developers.redhat.com/blog/?p=648647</id><updated>2019-11-08T08:00:59Z</updated><published>2019-11-08T08:00:59Z</published><content type="html">&lt;p id="memory-consumption"&gt;In &lt;a href="https://developers.redhat.com/blog/?p=642737"&gt;part one of this series&lt;/a&gt;, we took a detailed look at &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts" target="_blank" rel="noopener noreferrer"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP) quickstarts&lt;/a&gt; as a starting point for understanding how to modernize brownfield &lt;a href="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/"&gt;Java EE 8&lt;/a&gt; applications that run on &lt;a href="https://developers.redhat.com/products/eap/"&gt;JBoss EAP&lt;/a&gt;. In this part, we&amp;#8217;ll continue our discussion of modernization with a look at memory consumption.&lt;/p&gt; &lt;p&gt;Measuring performances is a fundamental topic when dealing with a modernization process, and memory consumption reporting is part of performance analysis. It&amp;#8217;s worth starting with these tools from the very beginning so that they can be used to evaluate the improvements achieved during the modernization process.&lt;span id="more-648647"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;A detailed introduction to measuring memory usage is available in &lt;a href="https://quarkus.io/guides/performance-measure#how-do-we-measure-memory-usage" target="_blank" rel="noopener noreferrer"&gt;Measuring Performance—How do we measure memory usage?&lt;/a&gt; Quarkus guide.&lt;/p&gt; &lt;p&gt;In the following paragraphs, memory consumption data for the three different application flavors presented above (JBoss EAP, packaged JAR, and native executable) will be captured in a &lt;em&gt;Linux&lt;/em&gt; system using &lt;a href="https://linux.die.net/man/1/pmap"&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://linux.die.net/man/1/ps"&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/a&gt; tools.&lt;/p&gt; &lt;h3 id="jboss-eap"&gt;JBoss EAP&lt;/h3&gt; &lt;p&gt;Start a JBoss EAP instance by following the &amp;#8220;&lt;a href="#deploy-helloworld"&gt;Deploy &lt;code&gt;helloworld&lt;/code&gt;&lt;/a&gt;&amp;#8221; section, and retrieve its PID (e.g., &lt;code&gt;7268&lt;/code&gt;) using the command:&lt;/p&gt; &lt;pre&gt;$ pgrep -lf jboss 7268 java &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;Add the &lt;code&gt;-a&lt;/code&gt; option to retrieve the full command line (i.e., &lt;code&gt;$ pgrep -af jboss&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Now, the &lt;code&gt;7268&lt;/code&gt; PID can be used to execute the following two commands:&lt;/p&gt; &lt;pre&gt;$ ps -o pid,rss,command -p 7268 PID RSS COMMAND 7268 665348 java -D[Standalone] -server -verbose:gc -Xloggc:/home/mrizzi/Tools/jboss-eap-7.2.0/jboss-eap-7.2/standalone/log/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=3M -XX:-TraceClassUnloading -Xms1303m -Xmx1303m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferI &lt;/pre&gt; &lt;p&gt;and:&lt;/p&gt; &lt;pre&gt;$ pmap -x 7268 7268: java -D[Standalone] -server -verbose:gc -Xloggc:/home/mrizzi/Tools/jboss-eap-7.2.0/jboss-eap-7.2/standalone/log/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=3M -XX:-TraceClassUnloading -Xms1303m -Xmx1303m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true -Dorg.jboss.boot.log.file=/home/mrizzi/Tools/jboss-eap-7.2.0/jboss-eap-7.2/standa Address Kbytes RSS Dirty Mode Mapping 00000000ae800000 1348608 435704 435704 rw--- [ anon ] 0000000100d00000 1035264 0 0 ----- [ anon ] 000055e4d2c2f000 4 4 0 r---- java 000055e4d2c30000 4 4 0 r-x-- java 000055e4d2c31000 4 0 0 r---- java 000055e4d2c32000 4 4 4 r---- java 000055e4d2c33000 4 4 4 rw--- java [...] ffffffffff600000 4 0 0 r-x-- [ anon ] ---------------- ------- ------- ------- total kB 3263224 672772 643024 &lt;/pre&gt; &lt;p&gt;Evaluating the &lt;code&gt;RSS&lt;/code&gt; values, it looks like JBoss EAP memory consumption is around 650MB.&lt;/p&gt; &lt;h3 id="packaged-jar"&gt;Packaged JAR&lt;/h3&gt; &lt;p&gt;Referring to the &amp;#8220;&lt;a href="#run-the-helloworld-packaged-jar"&gt;Run the &lt;code&gt;helloworld&lt;/code&gt; packaged JAR&lt;/a&gt;&amp;#8221; section, start the packaged JAR application by executing:&lt;/p&gt; &lt;pre&gt;$ java -jar ./target/helloworld-&lt;b&gt;&amp;#60;version&amp;#62;&lt;/b&gt;-runner.jar &lt;/pre&gt; &lt;p&gt;and retrieve its PID using again the &lt;code&gt;pgrep&lt;/code&gt; command (this time with the &lt;code&gt;-a&lt;/code&gt; option described in the note above):&lt;/p&gt; &lt;pre&gt;$ pgrep -af helloworld 6408 java -jar ./target/helloworld-&lt;b&gt;&amp;#60;version&amp;#62;&lt;/b&gt;-runner.jar &lt;/pre&gt; &lt;p&gt;Following the same process, use the &lt;code&gt;6408&lt;/code&gt; PID to evaluate memory consumption by executing:&lt;/p&gt; &lt;pre&gt;$ ps -o pid,rss,command -p 6408 PID RSS COMMAND 6408 125732 java -jar ./target/helloworld-quarkus-runner.jar &lt;/pre&gt; &lt;p&gt;and:&lt;/p&gt; &lt;pre&gt;$ pmap -x 6408 6408: java -jar ./target/helloworld-quarkus-runner.jar Address Kbytes RSS Dirty Mode Mapping 00000005d3200000 337408 0 0 rw--- [ anon ] 00000005e7b80000 5046272 0 0 ----- [ anon ] 000000071bb80000 168448 57576 57576 rw--- [ anon ] 0000000726000000 2523136 0 0 ----- [ anon ] 00000007c0000000 2176 2088 2088 rw--- [ anon ] 00000007c0220000 1046400 0 0 ----- [ anon ] 00005645b85d6000 4 4 0 r---- java 00005645b85d7000 4 4 0 r-x-- java 00005645b85d8000 4 0 0 r---- java 00005645b85d9000 4 4 4 r---- java 00005645b85da000 4 4 4 rw--- java [...] ffffffffff600000 4 0 0 r-x-- [ anon ] ---------------- ------- ------- ------- total kB 12421844 133784 115692 &lt;/pre&gt; &lt;p&gt;Evaluating the &lt;code&gt;RSS&lt;/code&gt; values, it looks like packaged JAR memory consumption is around 130MB.&lt;/p&gt; &lt;h3 id="native-executable"&gt;Native executable&lt;/h3&gt; &lt;p&gt;In this case, following the &amp;#8220;&lt;a href="#run-the-helloworld-native-executable"&gt;Run the &lt;code&gt;helloworld&lt;/code&gt; native executable&lt;/a&gt;&amp;#8221; section, the native executable application can be started with the command:&lt;/p&gt; &lt;pre&gt;$ ./target/helloworld-&lt;b&gt;&amp;#60;version&amp;#62;&lt;/b&gt;-runner &lt;/pre&gt; &lt;p&gt;Its PID can be retrieved with the same command used in the previous case:&lt;/p&gt; &lt;pre&gt;$ pgrep -af helloworld 6948 ./target/helloworld-&lt;b&gt;&amp;#60;version&amp;#62;&lt;/b&gt;-runner &lt;/pre&gt; &lt;p&gt;Then, use the &lt;code&gt;6948&lt;/code&gt; PID with the &lt;code&gt;ps&lt;/code&gt; and &lt;code&gt;pmap&lt;/code&gt; commands:&lt;/p&gt; &lt;pre&gt;$ ps -o pid,rss,command -p 6948 PID RSS COMMAND 6948 19084 ./target/helloworld-quarkus-runner &lt;/pre&gt; &lt;p&gt;and:&lt;/p&gt; &lt;pre&gt;$ pmap -x 6948 6948: ./target/helloworld-quarkus-runner Address Kbytes RSS Dirty Mode Mapping 0000000000400000 12 12 0 r---- helloworld-quarkus-runner 0000000000403000 10736 8368 0 r-x-- helloworld-quarkus-runner 0000000000e7f000 7812 6144 0 r---- helloworld-quarkus-runner 0000000001620000 2024 1448 308 rw--- helloworld-quarkus-runner 000000000181a000 4 4 4 r---- helloworld-quarkus-runner 000000000181b000 16 16 12 rw--- helloworld-quarkus-runner 0000000001e10000 1740 156 156 rw--- [ anon ] [...] ffffffffff600000 4 0 0 r-x-- [ anon ] ---------------- ------- ------- ------- total kB 1456800 20592 2684 &lt;/pre&gt; &lt;p&gt;Evaluating the &lt;code&gt;RSS&lt;/code&gt; values, it looks like native executable memory consumption is around 20MB.&lt;/p&gt; &lt;h3 id="memory-consumption-comparison"&gt;Memory consumption comparison&lt;/h3&gt; &lt;p&gt;In summary, the memory consumption data retrieved are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;JBoss EAP: 650MB&lt;/li&gt; &lt;li&gt;Packaged JAR: 130MB&lt;/li&gt; &lt;li&gt;Native builder: 20MB&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So, it&amp;#8217;s clear that there are advantages in terms of memory usage thanks to running the native executable.&lt;/p&gt; &lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In these articles, we explored how to modernize brownfield &lt;a href="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/"&gt;Java EE 8&lt;/a&gt; applications that run on &lt;a href="https://developers.redhat.com/products/eap/"&gt;JBoss EAP &lt;/a&gt; and provided an overview of different ways to develop, build, and run an application. We also showed how to capture memory consumption data in order to evaluate the improvements achieved during the modernization process.  These concepts provide the fundamentals for understanding how Quarkus works and why it&amp;#8217;s so useful, no matter whether the app is a simple &lt;code&gt;helloworld&lt;/code&gt; quickstart or a more complex and production-level application.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-2%2F&amp;#038;title=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2019/11/08/quarkus-modernize-helloworld-jboss-eap-quickstart-part-2/" data-a2a-title="Quarkus: Modernize “helloworld” JBoss EAP quickstart, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/08/quarkus-modernize-helloworld-jboss-eap-quickstart-part-2/"&gt;Quarkus: Modernize &amp;#8220;helloworld&amp;#8221; JBoss EAP quickstart, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/E8UX05Gow4M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In part one of this series, we took a detailed look at Red Hat JBoss Enterprise Application Platform (JBoss EAP) quickstarts as a starting point for understanding how to modernize brownfield Java EE 8 applications that run on JBoss EAP. In this part, we&amp;#8217;ll continue our discussion of modernization with a look at memory consumption. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/08/quarkus-modernize-helloworld-jboss-eap-quickstart-part-2/"&gt;Quarkus: Modernize &amp;#8220;helloworld&amp;#8221; JBoss EAP quickstart, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">648647</post-id><dc:creator>Marco Rizzi</dc:creator><dc:date>2019-11-08T08:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/11/08/quarkus-modernize-helloworld-jboss-eap-quickstart-part-2/</feedburner:origLink></entry><entry><title>4 container usage takeaways from the 2019 Sysdig report</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fpRuGLYTkq8/" /><category term="Cloud" /><category term="OpenShift" /><category term="containers" /><author><name>David Strom</name></author><id>https://developers.redhat.com/blog/?p=648247</id><updated>2019-11-08T08:00:46Z</updated><published>2019-11-08T08:00:46Z</published><content type="html">&lt;p&gt;You probably already knew that most of the &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt; created by developers are disposable, but did you realize that half of them are only around for less than five minutes? That and other fascinating details are available in &lt;a href="https://sysdig.com/blog/sysdig-2019-container-usage-report/"&gt;the latest annual container report from Sysdig&lt;/a&gt;, a container security and orchestration vendor.&lt;/p&gt; &lt;p&gt;This is the company’s third such report. The results are obtained from their own instrumentation collected from a five-day period last month of the more than 2 million containers used by their own customers. This means the results could be somewhat skewed toward more experienced container developers.&lt;span id="more-648247"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Nevertheless, the report merits some scrutiny. Here are four important takeaways.&lt;/p&gt; &lt;h3&gt;1. Containers are more disposable than most of us thought&lt;/h3&gt; &lt;p&gt;Last year’s report found that only a fifth of the containers lasted for less than five minutes. &lt;b&gt;This year found a fifth of containers operated for fewer than 10 seconds&lt;/b&gt;. That is a pretty significant jump. The report also found that half of the container images were replaced within a week. Taken together, these data points indicate a greater adoption of containers for more specific application and processing needs. But it also serves as a motivation for developers to ensure that no matter how short-lived, these containers need appropriate security measures.&lt;/p&gt; &lt;h3&gt;2. More than half have known security issues&lt;/h3&gt; &lt;p&gt;That brings up the next data point, where &lt;b&gt;more than half of the containers that Sysdig tools scanned were found to have known security vulnerabilities&lt;/b&gt;. These include common runtime mistakes, such as allowing files to be created below the &lt;em&gt;/etc&lt;/em&gt; and &lt;em&gt;/root&lt;/em&gt; directories, which could be sloppy programming or could indicate a potential malware threat. The report found a median of 21 containers running as root on the hosts surveyed, which again indicates a lack of rigor in how they are consumed and deployed by developers because a root-level container could potentially be used in a privilege escalation attack.&lt;/p&gt; &lt;h3&gt;3. Container density has doubled&lt;/h3&gt; &lt;p&gt;The report also found that &lt;b&gt;hosts were carrying twice the number of containers from last year&lt;/b&gt;, and a tenth of their customers are operating multiple public clouds to run their containers. Both show an increasing sophistication and maturity level, at least among Sysdig users. “With container density doubling since our last report, it’s evident that the rate of adoption is accelerating as usage matures,” said Suresh Vasudevan, Sysdig’s CEO, in their report.&lt;/p&gt; &lt;h3&gt;4. Red Hat OpenShift is in demand&lt;/h3&gt; &lt;p&gt;If you neglect the number of customers who are using Sysdig’s PaaS platform for on-premises deployments, &lt;strong&gt;&lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; comes out as being used by 43% of the customers for container orchestration and deployment.&lt;/strong&gt; The report authors say this shows that larger and more risk-averse organizations want the advantages of using &lt;a href="https://developers.redhat.com/developer-tools/kubernetes"&gt;Kubernetes&lt;/a&gt; but want to deploy it on a commercially supported platform.&lt;/p&gt; &lt;div id="attachment_648257" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-648257" class="wp-image-648257 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/sysdig-report-1024x404.png" alt="Sysdig report" width="640" height="253" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/sysdig-report-1024x404.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/sysdig-report-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/sysdig-report-768x303.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-648257" class="wp-caption-text"&gt;&lt;em&gt;Image used with permission from Sysdig.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Also of interest to Red Hat developers is the report’s rise in usage of the &lt;a href="https://developers.redhat.com/blog/2019/01/29/podman-kubernetes-yaml/"&gt;CRI-O&lt;/a&gt; to 4% of containers. This tool is a lightweight container runtime for Kubernetes. The report’s authors “expect CRI-O’s use to climb over the coming years, especially as customers running Red Hat OpenShift migrate from v3 to v4, where CRI-O replaces the previously provided Docker engine.”&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#38;linkname=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F08%2F4-container-usage-takeaways-from-the-2019-sysdig-report%2F&amp;#038;title=4%20container%20usage%20takeaways%20from%20the%202019%20Sysdig%20report" data-a2a-url="https://developers.redhat.com/blog/2019/11/08/4-container-usage-takeaways-from-the-2019-sysdig-report/" data-a2a-title="4 container usage takeaways from the 2019 Sysdig report"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/08/4-container-usage-takeaways-from-the-2019-sysdig-report/"&gt;4 container usage takeaways from the 2019 Sysdig report&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fpRuGLYTkq8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;You probably already knew that most of the containers created by developers are disposable, but did you realize that half of them are only around for less than five minutes? That and other fascinating details are available in the latest annual container report from Sysdig, a container security and orchestration vendor. This is the company’s [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/08/4-container-usage-takeaways-from-the-2019-sysdig-report/"&gt;4 container usage takeaways from the 2019 Sysdig report&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">648247</post-id><dc:creator>David Strom</dc:creator><dc:date>2019-11-08T08:00:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/11/08/4-container-usage-takeaways-from-the-2019-sysdig-report/</feedburner:origLink></entry><entry><title>Red Hat Summit 2020 submissions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PJ7RE3lqL6M/red-hat-summit-2020-submissions.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyStudio" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2020_submissions</id><updated>2019-11-08T06:00:00Z</updated><published>2019-11-08T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://reg.summit.redhat.com/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="625" data-original-width="1585" height="126" src="https://1.bp.blogspot.com/-XWdQUP29nkc/XcRFU57TXTI/AAAAAAAAwsk/EvBuCEj5XaAvkB2pkuabl2u9BYxyB86XQCNcBGAsYHQ/s320/Screenshot%2B2019-11-07%2Bat%2B16.38.47.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;It's that time of year again, where we all start putting our heads together and submitting our biggest ideas to the &lt;a href="https://reg.summit.redhat.com/" target="_blank"&gt;Red Hat Summit 2020 in San Francisco on Apr 27-29&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The last few years I've been lucky enough to head up the hands-on labs, meaning working with the selection team, the planning team, the labs development teams, the presenters, and finally the support teams on site. It's grown every year an last year was no less than 57 labs run for our attendees, with 6 of the top 10 voted sessions being hands-on labs. The top 3 of 4 for entire event where also hands-on labs sessions, so we're proud of our labs presenters!&lt;br /&gt;&lt;br /&gt;As you can imagine, that is a lot of work that has caused my participation in other areas (like presenting sessions myself) to decrease noticeably across that time span. This year I've been able to scale back my participation in hands-on labs to just the selection planning, with another team assuming the development and delivery management phases.&lt;br /&gt;&lt;br /&gt;Let's look at what this means for my participation in sharing open technology and ideas this year?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Freeing up my time means assisting friends and colleague with presenting their ideas, such as the following selection of talks and workshops:&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;5 Questions Everyone Ignores with Microservices&lt;/h3&gt;&lt;i&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. The choices you’ve got to make don’t preclude the daily work of developing amazing applications. From containers, cloud, multicloud, and beyond, microservices are the core infrastructure ensuring your organization's flexibility in the digital world. Funny enough, when discussing the development impact while transitioning to microservices, there are five questions that keep popping up in one form or another. These questions are the same regardless of organizational size and effect strategy discussions late in the process as organizations move towards microservice architectures. This session cover questions that everyone should ask about microservices. They're based on real life experiences in customer organizations around the world who are in the process of conquering microservices for existing development and for delivering modern applications. Join us for an hour of power, where real life developer experiences are used to highlight the lessons we're all learning as we transition our integration infrastructure into modern day microservices. (with&amp;nbsp; &lt;a href="https://twitter.com/RoelHodzelmans" target="_blank"&gt;Roel Hodzelmans&lt;/a&gt;) &lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;A beginners guide to using and contributing to the open Solution Exchange&lt;/h3&gt;&lt;i&gt;Are you a solution builder and designer who wants to share your work in the spirit of open collaboration? Are you active with rules, decisions, event processing, or process automation and pull together solutions in these areas with Red Hat technologies? Then this is the session for you! With the open Solution Exchange you have a place to contribute solutions, big or small, for others to use. If you’re just interested in speeding up your current project you can browse and leverage existing solution pieces that are available in the open Solution Exchange. &lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; &lt;i&gt;Learn more about this space designed to find, share, and collaborate on open source solutions. Soon you’ll find, learn, download, and test solutions that are ready to deploy in your existing projects. From small workflows to complex processes and applications. From on-premise solutions, to containers ready to run on OpenShift. The open Solution Exchange is your new one stop for leveraging the true power of sharing. Join us for an hour of power to learn how to become an expert user of the open Solution Exchange. (with Louis Cortez) &lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Concept to Reality: An Advanced Agile Integration Blueprint &lt;/h3&gt;&lt;i&gt;Are you all in on the concept of agile integration or just getting your toe in the water? Are you an expert or just getting started with concepts like integration, microservices, message integration, process integration, APIs, and all the things that make your customers experience the best it can be? This session has something for all levels as it walks attendees through the architecture concepts with whiteboard diagrams, easy to grasp images, with a bottom up approach to connecting the dots for the concepts of an integration architecture. Once the groundwork has been laid, the second half of this session take a look at an integration architecture blueprint based on three successful customer integration solutions. Presenting the results of researching these successful solution architectures provides attendees with a clear blueprint for matching to their own architectures, or to help solidify their plans for architecting successful integration solutions. (with &lt;a href="https://twitter.com/Christina_wm" target="_blank"&gt;Christina Lin&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Solving Retail Challenges Through Integration&lt;/h3&gt;&lt;i&gt;Digital disruption is causing a fundamental change in the Retail industry, forcing many retail businesses to reinvent themselves in the face of modern commerce. For example, customer buying decisions happen faster, channels to sell lack flexibility, traditional retail shopping experiences require adaptation, just to name a few. How do you keep up with one of the most dynamic and fast moving industries, let alone lead the pack? Join us for this session as Iain shares his insights into industry challenges and outlines how improved integration helps confront these issues. At the end of this session, you will leave with a better understanding of how modern, open source focused retail solutions such as Headless Commerce and integrated Point of Sale systems can deliver true advantage to retailers. Are you ready to embrace open source and take the lead? (with Iain Boyle)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;DevOps Heroes - Adding Automation Integration to your Toolbox&lt;/h3&gt;&lt;i&gt;DevOps is more than the process of automating your CI/CD pipelines to generate code and deployment artifacts for production. It’s also about organizational change and integration of many subtle processes that help you deliver applications seamlessly from development to production through your operations. Let’s unlock the power of process integration with a hands-on workshop using your own devices (laptops). We’ll take you through the integration of an organizational process as part of your DevOps strategy. Step-by-step you’ll build a domain model, creating an automated process, integrating user approval tasks and more using modern open source process automation tooling. Bring your laptop as this is a hands-on experience that takes you from nothing to a fully working DevOps supporting automation integration project. No experience in automation integration is required. Let’s add a new tool to your development toolbox and get you jump started on automation integration that’s supporting your organizations DevOps activities. Note: The workshop materials is free and available online, attendees can use and enjoy after the event. (with&amp;nbsp;&lt;a href="https://twitter.com/kvarel4" target="_blank"&gt;Karina Varela&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Agile Integration, because agile developers can’t wait for the IT department&lt;/h3&gt;&lt;i&gt;In digital business, nothing happens until something is integrated. The success (or failure) of a new service or application depends on its ability to communicate with other services, across an infrastructure, in scalable secure ways. That is the challenge of integration. While that’s a simple concept, there’s a lot of complexity in trying to work with different languages, APIs and protocols, different data formats, and different data requirements. The way that these integrations are designed and included in new applications can create new value and innovations for businesses. Historically, IT departments employed specialized tools and specialized developers to address integration, but that strategy serves as a bottleneck for fast moving innovation. This talk builds on the basics of the agile integration story providing; an overview of integration, storage, and other technologies compromising Red Hat’s integration solutions. We’ll discuss how to identify enterprise challenges and potential capabilities and solutions for those challenges. Finally, we’ll provide attendees with an overview of real customer examples and architectural blueprints based on their solutions. (with David Codelli)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Commit to Excellence - Best Practices for Container Development&lt;/h3&gt;&lt;i&gt;Time to market and providing first class services to customers is more important now than ever before and with the rate of innovation in IT, organizations need to be able to respond to customers needs in days rather than months. The growing complexity of container runtimes leaves developers and their fun behind unfortunately. But it does not have to be that way. This session shows you how to bring the fun back into development when using containers. Code Ready Containers is tooling designed to get you started locally on your very own machine and experiencing the joy of an easy to use container platform. Push your code and enjoy the ease of integrated tooling that builds, tests, and kicks off rolling deployments directly from your favorite IDE. Eric and Markus share their best practises and get you started from the ground up with Code Ready Containers. Join us and start finding your joy with cloud native development right there on your very own local machine. (with &lt;a href="https://twitter.com/myfear" target="_blank"&gt;Markus Eisele&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Designing Architectures Like a Boss&lt;/h3&gt;&lt;i&gt;Quickly and easily build architectural diagrams for your work that will impress your mother, your friends, and you customers! This workshop helps developers, architects, and consultants learn how to use a streamlined architecture diagramming tool focused on open source architectures. These architectures will help you illustrate how the open source solutions are implemented. Architecture diagrams you create are suitable for use in customer and prospect presentations, press articles, blog posts, website content, customer documentation and training and other influential materials. Your expertise and customer experience could drive architecture diagrams that not only change public opinion of your work, but also how you enable your colleagues in your organization. Be prepared to bring your own successful project implementations to life with beautifully illustrated diagrams after taking this workshop! (with &lt;a href="https://twitter.com/IoT_Ishu" target="_blank"&gt;Ishu Verma)&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Now it's fingers crossed and waiting on any acceptance letters!&lt;i&gt; &lt;/i&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ZkyPBRuFc30:dKNl9a_uz6g:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ZkyPBRuFc30:dKNl9a_uz6g:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ZkyPBRuFc30:dKNl9a_uz6g:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ZkyPBRuFc30:dKNl9a_uz6g:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ZkyPBRuFc30:dKNl9a_uz6g:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ZkyPBRuFc30" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PJ7RE3lqL6M" height="1" width="1" alt=""/&gt;</content><summary>It's that time of year again, where we all start putting our heads together and submitting our biggest ideas to the Red Hat Summit 2020 in San Francisco on Apr 27-29. The last few years I've been lucky enough to head up the hands-on labs, meaning working with the selection team, the planning team, the labs development teams, the presenters, and finally the support teams on site. It's grown every y...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-11-08T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ZkyPBRuFc30/red-hat-summit-2020-submissions.html</feedburner:origLink></entry><entry><title>The Week in JBoss [2019-11-07] - Quarkus 1.0 Announced!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Gq6j8EimuAg/the-week-in-jboss-2019-11-07-quarkus-10-announced" /><category term="3scale" scheme="searchisko:content:tags" /><category term="EAP" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="rhdm" scheme="searchisko:content:tags" /><category term="RHPAM" scheme="searchisko:content:tags" /><author><name>Paul Robinson</name></author><id>searchisko:content:id:jbossorg_blog-the_week_in_jboss_2019_11_07_quarkus_1_0_announced</id><updated>2019-11-07T18:35:18Z</updated><published>2019-11-07T18:35:18Z</published><content type="html">&lt;!-- [DocumentBodyStart:05ad831e-e194-4d73-91c9-7d347e4589ff] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://quarkus.io/blog/announcing-quarkus-1-0/" rel="nofollow"&gt;&lt;img alt="" class="image-1 jive-image" height="258" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6336-383435/pastedImage_1.png" style="max-width:409px; max-" width="409"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The big news this week is that &lt;a class="jive-link-external-small" href="https://quarkus.io/blog/announcing-quarkus-1-0/" rel="nofollow"&gt;Quarkus 1.0 was announced&lt;/a&gt;! If you've been involved or following the JBoss community recently you will likely have been hearing a lot about Quarkus. This new project has been getting a lot of attention as a framework for massively shrinking the memory footprint and boot times of Java applications. Thus making Java a preferred option in the Microservices and Serverless space. The first release candidate of Quarkus 1.0.0 became available this week, giving the Quarkus community an opportunity to discover any last-minute fixes needed before the imminent 1.0.0.Final release.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Reaching 1.0.0 of Quarkus has been a momentous effort by the community, of 177 contributors, in just 8 months since the initial public release. &lt;a class="jive-link-blog-small" data-containerId="1427" data-containerType="37" data-objectId="6335" data-objectType="38" href="https://developer.jboss.org/blogs/mark.little/2019/11/07/quarkus-10"&gt;Read here&lt;/a&gt; as Mark Little gives his perspective on this significant milestone and looks to the future.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;I'll leave it to Edson to provide a summary of the developer experience...&lt;/p&gt;&lt;blockquote class="twitter-tweet" style="font-family: 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif;"&gt;&lt;p dir="ltr" lang="en"&gt;Life is too short to wait for you application to start/restart. Add something that sparks joy with &lt;a class="jive-link-external-small" href="https://twitter.com/QuarkusIO?ref_src=twsrc%5Etfw" rel="nofollow"&gt;@QuarkusIO&lt;/a&gt;! &lt;a href="/9.0.2.8500fd4/images/emojis/1f601.png"&gt;&lt;img class="jive_emoji jive-image" src="/9.0.2.8500fd4/images/emojis/1f601.png"/&gt;&lt;/a&gt;&lt;a href="/9.0.2.8500fd4/images/emojis/2764.png"&gt;&lt;img class="jive_emoji jive-image" src="/9.0.2.8500fd4/images/emojis/2764.png"/&gt;&lt;/a&gt;&lt;a href="/9.0.2.8500fd4/images/emojis/1f680.png"&gt;&lt;img class="jive_emoji jive-image" src="/9.0.2.8500fd4/images/emojis/1f680.png"/&gt;&lt;/a&gt; (Turn the sound on) &lt;a class="jive-link-external-small" href="https://t.co/IuCxzF9wiH" rel="nofollow"&gt;pic.twitter.com/IuCxzF9wiH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Edson Yanaga (@yanaga) &lt;a class="jive-link-external-small" href="https://twitter.com/yanaga/status/1192137914425196544?ref_src=twsrc%5Etfw" rel="nofollow"&gt;November 6, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;p class="twitter-tweet" style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;How do I get started with Quarkus?&lt;/h3&gt;&lt;p&gt;&lt;span&gt;If you are looking to get started with Quarkus, then you are well served. The easiest way to get going is to visit &lt;/span&gt;&lt;a class="jive-link-external-small" href="https://code.quarkus.io/" rel="nofollow"&gt;https://code.quarkus.io&lt;/a&gt;&lt;span&gt; to generate your first application. You can then read the &lt;/span&gt;&lt;a class="jive-link-external-small" href="https://quarkus.io/get-started/" rel="nofollow"&gt;getting started guide&lt;/a&gt; to learn how to get your application started and how to experience the lightning fast developer experience. Getting started applications are great, but there comes a time when you need to go beyond and learn the technologies required to build your real application. Quarkus has you covered there too with the &lt;a class="jive-link-external-small" href="https://quarkus.io/guides/" rel="nofollow"&gt;extensive guides section&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;How do I migrate my existing Java application to Quarkus?&lt;/h3&gt;&lt;p&gt;Earlier this week Marco Rizzi wrote a &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/11/07/quarkus-modernize-helloworld-jboss-eap-quickstart-part-1/" rel="nofollow"&gt;blog post&lt;/a&gt; showing you how to take a traditional Java EE application running on JBoss EAP and modify it to run on Quarkus. Marco demonstrates this using a simple Hello World style application, but the principles he follows will hopefully be of use to other porting a real application.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Get hands-on experience with Kubernetes and Quarkus at DevNation Live in Austin&lt;/h3&gt;&lt;p&gt;In Austin on December 12th and excited about Quarkus? If so, come along to a &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/11/04/get-hands-on-experience-with-kubernetes-and-quarkus-at-devnation-live-in-austin/" rel="nofollow"&gt;free DevNation:Live event &lt;/a&gt;and get hands on experience delivered by Red Hat experts.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 20px; font-weight: bold;"&gt;In Other News...&lt;/span&gt;&lt;/p&gt;&lt;p class="twitter-tweet"&gt;Despite the huge Quarkus news this week, the community has also been busy in other areas...&lt;/p&gt;&lt;p class="twitter-tweet" style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3 class="twitter-tweet"&gt;Managing JBoss EAP/Wildfly using Jcliff&lt;/h3&gt;&lt;p class="twitter-tweet"&gt;In &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/11/06/managing-jboss-eap-wildfly-using-jcliff/" rel="nofollow"&gt;this post&lt;/a&gt; Andrew Block and Romain Pelisse explain how to manage JBoss EAP using the Jcliff project. They show how this Java-based utility takes version-control friendly declarative configuration and applies it to your JBoss EAP installations.&lt;/p&gt;&lt;p class="twitter-tweet" style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3 class="twitter-tweet"&gt;How to Secure Microservices with Red Hat Single Sign-On, Fuse, and 3scale&lt;/h3&gt;&lt;p class="twitter-tweet"&gt;In &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/10/30/how-to-secure-microservices-with-red-hat-single-sign-on-fuse-and-3scale/" rel="nofollow"&gt;this comprehensive post&lt;/a&gt;, Raphael Abreu walks us through a proof of concept architecture for demonstrating how to protect APIs with Red Hat Single Sign-On (Keycloak) and 3scale.&lt;/p&gt;&lt;p class="twitter-tweet" style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3 class="twitter-tweet"&gt;Domain-specific Prometheus metrics with Red Hat Process Automation Manager and Decision Manager&lt;/h3&gt;&lt;p class="twitter-tweet"&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/10/31/domain-specific-prometheus-metrics-with-red-hat-process-automation-manager-and-decision-manager/" rel="nofollow"&gt;Here&lt;/a&gt; Duncan Doyle shows how &lt;a class="jive-link-external-small" href="https://developers.redhat.com/products/rhpam/overview" rel="nofollow"&gt;Red Hat Process Automation Manager&lt;/a&gt; (RHPAM) and &lt;a class="jive-link-external-small" href="https://www.redhat.com/en/technologies/jboss-middleware/decision-manager" rel="nofollow"&gt;Red Hat Decision Manager&lt;/a&gt; (RHDM) can be connected to Prometheus for gathering domain-specific metrics.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:05ad831e-e194-4d73-91c9-7d347e4589ff] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Gq6j8EimuAg" height="1" width="1" alt=""/&gt;</content><summary>  The big news this week is that Quarkus 1.0 was announced! If you've been involved or following the JBoss community recently you will likely have been hearing a lot about Quarkus. This new project has been getting a lot of attention as a framework for massively shrinking the memory footprint and boot times of Java applications. Thus making Java a preferred option in the Microservices and Serverle...</summary><dc:creator>Paul Robinson</dc:creator><dc:date>2019-11-07T18:35:18Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/11/07/the-week-in-jboss-2019-11-07-quarkus-10-announced</feedburner:origLink></entry><entry><title>Quarkus 1.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rMly-80iKL0/quarkus-10" /><category term="feed_group_name_management" scheme="searchisko:content:tags" /><category term="feed_name_marklittle" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Mark Little</name></author><id>searchisko:content:id:jbossorg_blog-quarkus_1_0</id><updated>2019-11-07T12:46:34Z</updated><published>2019-11-07T12:46:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:c1cabb3f-3967-407f-9501-e4cc3d27692a] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;By now you should all know that Quarkus 1.0 is out! Congratulations to the entire community team who have taken an initial idea we had in early 2018 through a public release almost a year later and then to a 1.0 only about 8 months after that. This is a significant milestone for everyone involved and particularly for helping to make Java relevant in the modern Kubernetes world. If you&amp;#8217;ve been involved in this, whether as a contributor of code, raising issues, tweeting your opinions etc. then you should all take a bow! &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;I've seen frameworks and stacks come and go over the decades, with some of them being massively successful for their time. However, whether it's DCE, CORBA, JBoss itself, Spring ... I've never seen anything quite like Quarkus in terms of almost instantaneous popularity, the ability to capture the imagination of people, mine a deep-rooted need for Java developers and to create a new wave: true Kubernetes native Java middleware. As several people (non-Red Hatters/non-JBossians) have said, it truly feels like "a paradigm shift". It enables developers to bring their Java skills to Kubernetes and feel like they can be as productive (more productive) than developers using other languages.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;I&amp;#8217;m not going to repeat what I&amp;#8217;ve already said about Quarkus technically in previous entries (go look if you haven&amp;#8217;t seen them). However, I did want to make something clearer: the secret to Quarkus isn't re-architecting so many of the most popular Java frameworks and stacks, it&amp;#8217;s not our work around OpenJDK Hotspot, it&amp;#8217;s not how we use GraalVM (SubstrateVM), it&amp;#8217;s not Eclipse MicroProfile use, it&amp;#8217;s not a focus on serverless or Developer Joy, etc. There is no one thing that has really captured the attention of the community. It&amp;#8217;s all of these and more, which in many ways makes the relatively short period of time Quarkus has been &amp;ldquo;alive&amp;#8221; so much more impressive for what has been accomplished. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now 1.0 isn&amp;#8217;t the end of the road by any means! The community has great aspirations and goals ahead of them. We want to appeal to the broadest possible range of Java developers (ok, maybe other JVM languages too on a case by case basis). I won&amp;#8217;t spoil the surprises to come (though since everything we&amp;#8217;re doing is public, it&amp;#8217;s not hard to find out). But suffice it to say I expect to see more around MicroProfile adoption and influence, more integration with Kubernetes/Knative/Istio etc., tooling improvements, FaaS, &amp;hellip; &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;And of course another future step is to a fully supported product and for Quarkus to be used in other products, e.g., Red Hat Integration (where Camel-K will reside, for instance) and Red Hat Automation (where Kogito will reside). Busy times ahead but also exciting times! &lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:c1cabb3f-3967-407f-9501-e4cc3d27692a] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rMly-80iKL0" height="1" width="1" alt=""/&gt;</content><summary>By now you should all know that Quarkus 1.0 is out! Congratulations to the entire community team who have taken an initial idea we had in early 2018 through a public release almost a year later and then to a 1.0 only about 8 months after that. This is a significant milestone for everyone involved and particularly for helping to make Java relevant in the modern Kubernetes world. If you’ve been invo...</summary><dc:creator>Mark Little</dc:creator><dc:date>2019-11-07T12:46:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/mark.little/2019/11/07/quarkus-10</feedburner:origLink></entry><entry><title>Support lifecycle for Clang/LLVM, Go, and Rust in Red Hat Enterprise Linux 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Sq_624d0bQE/" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><category term="Rust" scheme="searchisko:content:tags" /><author><name>Tom Stellard</name></author><id>searchisko:content:id:jbossorg_blog-support_lifecycle_for_clang_llvm_go_and_rust_in_red_hat_enterprise_linux_8</id><updated>2019-11-07T08:01:05Z</updated><published>2019-11-07T08:01:05Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-ups-iq-intelligent-operating-system-latest-release-red-hat-enterprise-linux-8?sc_cid=701f2000000tyBjAAI"&gt;Red Hat Enterprise Linux (RHEL) 8.1.0&lt;/a&gt; includes updates to our llvm-toolset, &lt;a href="https://developers.redhat.com/blog/2019/06/24/go-and-fips-140-2-on-red-hat-enterprise-linux/"&gt;go-toolset&lt;/a&gt;, and rust-toolset application streams, which provide developers with up-to-date versions of these &lt;a href="https://developers.redhat.com/products/gcc-clang-llvm-go-rust/overview"&gt;compiler toolchains&lt;/a&gt;. The upstream projects for these streams move very quickly with new feature releases every six months for LLVM and Go, and every six weeks (!) for Rust. The communities around these toolchains encourage users to users to always stay up-to-date with the latest releases, which is why we try to get new versions into Red Hat Enterprise Linux as quickly as we can.&lt;/p&gt; &lt;p&gt;From a support perspective, we will continue to support these application streams for the entire life of &lt;a href="https://developers.redhat.com/rhel8/"&gt;RHEL 8&lt;/a&gt;. We will provide new features and bug fixes within the stream by updating to newer upstream releases on a regular basis. For llvm-toolset and go-toolset, you can expect stream updates every six months, and for rust-toolset you can expect updates every three months.&lt;span id="more-645807"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The Go and Rust languages continue to evolve and add new features with each compiler update, which is why so many users are interested in getting the latest versions of the compilers. At the same time, these compilers are designed to remain compatible with older code. So, even as we advance to newer versions of Go and Rust within the RHEL 8 application streams, you should not need to update your codebase to keep it compilable. Once you&amp;#8217;ve compiled your valid code using the Go or Rust application stream, you can make the assumption that it will continue to compile with that stream for the full life of RHEL 8.&lt;/p&gt; &lt;p&gt;We are excited to continue to bring you the latest and greatest in new compiler technologies. Stay tuned to the Red Hat Developer blog to learn more about what you can do with LLVM, Go, and Rust.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fsupport-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8%2F&amp;#038;title=Support%20lifecycle%20for%20Clang%2FLLVM%2C%20Go%2C%20and%20Rust%20in%20Red%20Hat%20Enterprise%20Linux%208" data-a2a-url="https://developers.redhat.com/blog/2019/11/07/support-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8/" data-a2a-title="Support lifecycle for Clang/LLVM, Go, and Rust in Red Hat Enterprise Linux 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/07/support-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8/"&gt;Support lifecycle for Clang/LLVM, Go, and Rust in Red Hat Enterprise Linux 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Sq_624d0bQE" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Enterprise Linux (RHEL) 8.1.0 includes updates to our llvm-toolset, go-toolset, and rust-toolset application streams, which provide developers with up-to-date versions of these compiler toolchains. The upstream projects for these streams move very quickly with new feature releases every six months for LLVM and Go, and every six weeks (!) for Rust. The communities around these toolchains en...</summary><dc:creator>Tom Stellard</dc:creator><dc:date>2019-11-07T08:01:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/11/07/support-lifecycle-for-clang-llvm-go-and-rust-in-red-hat-enterprise-linux-8/</feedburner:origLink></entry><entry><title>Quarkus: Modernize “helloworld” JBoss EAP quickstart, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sKhvRGV73T4/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Red Hat Application Migration Toolset" scheme="searchisko:content:tags" /><author><name>Marco Rizzi</name></author><id>searchisko:content:id:jbossorg_blog-quarkus_modernize_helloworld_jboss_eap_quickstart_part_1</id><updated>2019-11-07T08:00:02Z</updated><published>2019-11-07T08:00:02Z</published><content type="html">&lt;p&gt;&lt;a href="https://quarkus.io/" target="_blank" rel="noopener noreferrer"&gt;Quarkus&lt;/a&gt; is, in its own words, &amp;#8220;Supersonic subatomic Java&amp;#8221; and a &amp;#8220;Kubernetes native Java stack tailored for GraalVM &amp;#38; OpenJDK HotSpot, crafted from the best of breed Java libraries and &lt;a href="https://quarkus.io/vision/standards" target="_blank" rel="noopener noreferrer"&gt;standards.&lt;/a&gt;&amp;#8221; &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts" target="_blank" rel="noopener noreferrer"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP) quickstarts&lt;/a&gt; are a good starting point for understanding how to modernize brownfield &lt;a href="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/"&gt;Java EE 8&lt;/a&gt; applications that run on &lt;a href="https://developers.redhat.com/products/eap/"&gt;JBoss EAP&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s important to note that both Quarkus and JBoss EAP rely on providing developers with tools based—as much as possible—on standards. If your application is not already running on JBoss EAP, there&amp;#8217;s no problem. You can migrate it from your current application server to JBoss EAP using the &lt;a href="https://developers.redhat.com/products/rhamt"&gt;Red Hat Application Migration Toolkit&lt;/a&gt;. After that, the final and working modernized version of the code is available in the &lt;a href="https://github.com/mrizzi/jboss-eap-quickstarts/tree/quarkus" target="_blank" rel="noopener noreferrer"&gt;https://github.com/mrizzi/jboss-eap-quickstarts/tree/quarkus&lt;/a&gt; repository inside the &lt;a href="https://github.com/mrizzi/jboss-eap-quickstarts/tree/quarkus/helloworld" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;helloworld&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt; &lt;p&gt;This article is based on the &lt;a href="https://quarkus.io/guides/" target="_blank" rel="noopener noreferrer"&gt;guides Quarkus provides&lt;/a&gt;, mainly &lt;a href="https://quarkus.io/guides/getting-started-guide" target="_blank" rel="noopener noreferrer"&gt;Creating Your First Application&lt;/a&gt; and &lt;a href="https://quarkus.io/guides/building-native-image-guide.html" target="_blank" rel="noopener noreferrer"&gt;Building a Native Executable&lt;/a&gt;.&lt;span id="more-642737"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Get the code&lt;/h2&gt; &lt;p&gt;To start, clone the &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts" target="_blank" rel="noopener noreferrer"&gt;JBoss EAP quickstarts&lt;/a&gt; repository locally, running:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/jboss-developer/jboss-eap-quickstarts.git Cloning into 'jboss-eap-quickstarts'... remote: Enumerating objects: 148133, done. remote: Total 148133 (delta 0), reused 0 (delta 0), pack-reused 148133 Receiving objects: 100% (148133/148133), 59.90 MiB | 7.62 MiB/s, done. Resolving deltas: 100% (66476/66476), done. $ cd jboss-eap-quickstarts/helloworld/&lt;/pre&gt; &lt;h2 id="try-plain-vanilla-helloworld"&gt;Try plain, vanilla &lt;code&gt;helloworld&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;The name of the quickstart is a strong clue about what this application does, but let&amp;#8217;s follow a scientific approach in modernizing this code, so first things first: Try the application as it is.&lt;/p&gt; &lt;h3 id="deploy-helloworld"&gt;Deploy &lt;code&gt;helloworld&lt;/code&gt;&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Open a terminal and navigate to the root of the JBoss EAP directory &lt;code&gt;EAP_HOME&lt;/code&gt; (which you can &lt;a href="https://developers.redhat.com/products/eap/download"&gt;download&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Start the JBoss EAP server with the default profile by typing the following command:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ EAP_HOME/bin/standalone.sh &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note: &lt;/strong&gt;For Windows, use the &lt;code&gt;EAP_HOME\bin\standalone.bat&lt;/code&gt; script.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;After a few seconds, the log should look like:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;[org.jboss.as] (Controller Boot Thread) WFLYSRV0025: JBoss EAP 7.2.0.GA (WildFly Core 6.0.11.Final-redhat-00001) started in 3315ms - Started 306 of 527 services (321 services are lazy, passive or on-demand)&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Open &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; in a browser, and a page like Figure 1 should appear:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_642767" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-642767" class="wp-image-642767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-home-page-1024x644.png" alt="The JBoss EAP home page." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-home-page-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-home-page-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-home-page-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-home-page.png 1316w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-642767" class="wp-caption-text"&gt;&lt;em&gt;Figure 1: The JBoss EAP home page.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;ol start="4"&gt; &lt;li&gt;Following instructions from &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts#build-and-deploy-the-quickstart" target="_blank" rel="noopener noreferrer"&gt;Build and Deploy the Quickstart&lt;/a&gt;, deploy the &lt;code&gt;helloworld&lt;/code&gt; quickstart and execute (from the project root directory) the command:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ mvn clean install wildfly:deploy &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;This command should end successfully with a log like this:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;[INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 8.224 s &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;helloworld&lt;/code&gt; application has now been deployed for the first time in JBoss EAP in about eight seconds.&lt;/p&gt; &lt;h3 id="test-helloworld"&gt;Test &lt;code&gt;helloworld&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;Following the &lt;a href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/7.2.0.GA/helloworld#access-the-application" target="_blank" rel="noopener noreferrer"&gt;Access the Application&lt;/a&gt; guide, open &lt;code&gt;http://127.0.0.1:8080/helloworld&lt;/code&gt; in the browser and see the application page, as shown in Figure 2:&lt;/p&gt; &lt;div id="attachment_642787" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-642787" class="wp-image-642787 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-world-1024x644.png" alt="JBoss EAP's Hello World." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-world-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-world-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-world-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-world.png 1316w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-642787" class="wp-caption-text"&gt;&lt;em&gt;Figure 2: JBoss EAP&amp;#8217;s Hello World.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;h3 id="make-some-changes"&gt;Make changes&lt;/h3&gt; &lt;p&gt;Change the &lt;code&gt;createHelloMessage(String name)&lt;/code&gt; input parameter from &lt;code&gt;World&lt;/code&gt; to &lt;code&gt;Marco&lt;/code&gt; (my ego is cheap):&lt;/p&gt; &lt;pre&gt;writer.println("&amp;#60;h1&amp;#62;" + helloService.createHelloMessage("Marco") + "&amp;#60;/h1&amp;#62;");&lt;/pre&gt; &lt;p&gt;Execute again the command:&lt;/p&gt; &lt;pre&gt;$ mvn clean install wildfly:deploy &lt;/pre&gt; &lt;p&gt;and then refresh the web page in the browser to check the message displayed changes, as shown in Figure 3:&lt;/p&gt; &lt;div id="attachment_642797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-642797" class="wp-image-642797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-marco-1024x644.png" alt="JBoss EAP's Hello Marco." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-marco-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-marco-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-marco-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/jboss-eap-hello-marco.png 1316w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-642797" class="wp-caption-text"&gt;&lt;em&gt;Figure 3: JBoss EAP&amp;#8217;s Hello Marco.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;h3 id="undeploy-helloworld-and-shutdown"&gt;Undeploy &lt;code&gt;helloworld&lt;/code&gt; and shut down&lt;/h3&gt; &lt;p&gt;If you want to undeploy (optional) the application before shutting down JBoss EAP, run the following command:&lt;/p&gt; &lt;pre&gt;$ mvn clean install wildfly:undeploy &lt;/pre&gt; &lt;p&gt;To shut down the JBoss EAP instance, enter Ctrl+C in the terminal where it&amp;#8217;s running.&lt;/p&gt; &lt;h2 id="lets-modernize-helloworld"&gt;Let&amp;#8217;s modernize &lt;code&gt;helloworld&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;Now we can leave the original &lt;code&gt;helloworld&lt;/code&gt; behind and update it.&lt;/p&gt; &lt;h3 id="create-a-new-branch-useful-or-ot"&gt;Create a new branch&lt;/h3&gt; &lt;p&gt;Create a new working branch once the quickstart project finishes executing:&lt;/p&gt; &lt;pre&gt;$ git checkout -b quarkus 7.2.0.GA &lt;/pre&gt; &lt;h3 id="changes-in-pomxml-file"&gt;Change the &lt;code&gt;pom.xml&lt;/code&gt; file&lt;/h3&gt; &lt;p&gt;The time has come to start changing the application. starting from the &lt;code&gt;pom.xml&lt;/code&gt; file. From the &lt;code&gt;helloworld&lt;/code&gt; folder, run the following command to let Quarkus add XML blocks:&lt;/p&gt; &lt;pre&gt;$ mvn io.quarkus:quarkus-maven-plugin:0.23.2:create &lt;/pre&gt; &lt;p&gt;This article uses the 0.23.2 version. To know which is the latest version is, please refer to &lt;a href="https://github.com/quarkusio/quarkus/releases/latest/" target="_blank" rel="noopener noreferrer"&gt;https://github.com/quarkusio/quarkus/releases/latest/&lt;/a&gt;, since the Quarkus release cycles are short.&lt;/p&gt; &lt;p&gt;This command changed the &lt;code&gt;pom.xml&lt;/code&gt;, file adding:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The property &lt;code&gt;&amp;#60;quarkus.version&amp;#62;&lt;/code&gt; to define the Quarkus version to be used.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;&amp;#60;dependencyManagement&amp;#62;&lt;/code&gt; block to import the Quarkus bill of materials (BOM). In this way, there&amp;#8217;s no need to add the version to each Quarkus dependency.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;quarkus-maven-plugin&lt;/code&gt; plugin responsible for packaging the application, and also providing the development mode.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;native&lt;/code&gt; profile to create application native executables.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further changes required to &lt;code&gt;pom.xml&lt;/code&gt;, to be done manually:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Move the &lt;code&gt;&amp;#60;groupId&amp;#62;&lt;/code&gt; tag outside of the &lt;code&gt;&amp;#60;parent&amp;#62;&lt;/code&gt; block, and above the &lt;code&gt;&amp;#60;artifactId&amp;#62;&lt;/code&gt; tag. Because we remove the &lt;code&gt;&amp;#60;parent&amp;#62;&lt;/code&gt; block in the next step, the &lt;code&gt;&amp;#60;groupId&amp;#62;&lt;/code&gt; must be preserved.&lt;/li&gt; &lt;li&gt;Remove the &lt;code&gt;&amp;#60;parent&amp;#62;&lt;/code&gt; block: The application doesn&amp;#8217;t need the JBoss parent pom anymore to run with Quarkus.&lt;/li&gt; &lt;li&gt;Add the &lt;code&gt;&amp;#60;version&amp;#62;&lt;/code&gt; tag (below the &lt;code&gt;&amp;#60;artifactId&amp;#62;&lt;/code&gt; tag) with the value you prefer.&lt;/li&gt; &lt;li&gt;Remove the &lt;code&gt;&amp;#60;packaging&amp;#62;&lt;/code&gt; tag: The application won&amp;#8217;t be a WAR anymore, but a plain JAR.&lt;/li&gt; &lt;li&gt;Change the following dependencies: &lt;ol&gt; &lt;li&gt;Replace the &lt;code&gt;javax.enterprise:cdi-api&lt;/code&gt; dependency with &lt;a href="https://quarkus.io/extensions/#core"&gt;&lt;code&gt;io.quarkus:quarkus-arc&lt;/code&gt;&lt;/a&gt;, removing &lt;code&gt;&amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62;&lt;/code&gt; because—as stated in the documentation—this Quarkus extension provides the CDI dependency injection.&lt;/li&gt; &lt;li&gt;Replace the &lt;code&gt;org.jboss.spec.javax.servlet:jboss-servlet-api_4.0_spec&lt;/code&gt; dependency with &lt;a href="https://quarkus.io/extensions/#web"&gt;&lt;code&gt;io.quarkus:quarkus-undertow&lt;/code&gt;&lt;/a&gt;, removing the &lt;code&gt;&amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62;&lt;/code&gt;, because—again as stated in the documentation—this is the Quarkus extension that provides support for servlets.&lt;/li&gt; &lt;li&gt;Remove the &lt;code&gt;org.jboss.spec.javax.annotation:jboss-annotations-api_1.3_spec&lt;/code&gt; dependency because it&amp;#8217;s coming with the previously changed dependencies.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The &lt;code&gt;pom.xml&lt;/code&gt; file&amp;#8217;s fully changed version is available at &lt;a href="https://github.com/mrizzi/jboss-eap-quickstarts/blob/quarkus/helloworld/pom.xml" target="_blank" rel="noopener noreferrer"&gt;https://github.com/mrizzi/jboss-eap-quickstarts/blob/quarkus/helloworld/pom.xml&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note that the above &lt;code&gt;mvn io.quarkus:quarkus-maven-plugin:0.23.2:create&lt;/code&gt; command, besides the changes to the &lt;code&gt;pom.xml&lt;/code&gt; file, added components to the project. The added file and folders are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The files &lt;code&gt;mvnw&lt;/code&gt; and &lt;code&gt;mvnw.cmd&lt;/code&gt;, and &lt;code&gt;.mvn&lt;/code&gt; folder: The &lt;a href="https://github.com/takari/maven-wrapper" target="_blank" rel="noopener noreferrer"&gt;Maven Wrapper&lt;/a&gt; allows you to run Maven projects with a specific version of Maven without requiring that you install that specific Maven version.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;docker&lt;/code&gt; folder (in &lt;code&gt;src/main/&lt;/code&gt;): This folder contains example &lt;code&gt;Dockerfile&lt;/code&gt; files for both &lt;code&gt;native&lt;/code&gt; and &lt;code&gt;jvm&lt;/code&gt; modes (together with a &lt;code&gt;.dockerignore&lt;/code&gt; file).&lt;/li&gt; &lt;li&gt;The &lt;code&gt;resources&lt;/code&gt; folder (in &lt;code&gt;src/main/&lt;/code&gt;): This folder contains an empty &lt;code&gt;application.properties&lt;/code&gt; file and the sample Quarkus landing page &lt;code&gt;index.html&lt;/code&gt; (more in the section &amp;#8220;&lt;a href="#try-the-modernized-helloworld"&gt;Run the modernized &lt;code&gt;helloworld&lt;/code&gt;&lt;/a&gt;&amp;#8220;).&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="try-to-run-helloworld"&gt;Run &lt;code&gt;helloworld&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;To test the application, use &lt;code&gt;quarkus:dev&lt;/code&gt;, which runs Quarkus in development mode (more details on &lt;a href="https://quarkus.io/guides/getting-started-guide#development-mode" target="_blank" rel="noopener noreferrer"&gt;Development Mode here&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;We expect this step to fail as changes are still required to the application, as detailed in this section.&lt;/p&gt; &lt;p&gt;Now run the command to check if and how it works:&lt;/p&gt; &lt;pre&gt;$ ./mvnw compile quarkus:dev [INFO] Scanning for projects... [INFO] [INFO] ----------------&amp;#60; org.jboss.eap.quickstarts:helloworld &amp;#62;---------------- [INFO] Building Quickstart: helloworld quarkus [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ helloworld --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 2 resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ helloworld --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- quarkus-maven-plugin:0.23.2:dev (default-cli) @ helloworld --- Listening for transport dt_socket at address: 5005 INFO [io.qua.dep.QuarkusAugmentor] Beginning quarkus augmentation INFO [org.jbo.threads] JBoss Threads version 3.0.0.Final ERROR [io.qua.dev.DevModeMain] Failed to start quarkus: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors [error]: Build step io.quarkus.arc.deployment.ArcProcessor#validate threw an exception: javax.enterprise.inject.spi.DeploymentException: javax.enterprise.inject.UnsatisfiedResolutionException: Unsatisfied dependency for type org.jboss.as.quickstarts.helloworld.HelloService and qualifiers [@Default] - java member: org.jboss.as.quickstarts.helloworld.HelloWorldServlet#helloService - declared on CLASS bean [types=[javax.servlet.ServletConfig, java.io.Serializable, org.jboss.as.quickstarts.helloworld.HelloWorldServlet, javax.servlet.GenericServlet, javax.servlet.Servlet, java.lang.Object, javax.servlet.http.HttpServlet], qualifiers=[@Default, @Any], target=org.jboss.as.quickstarts.helloworld.HelloWorldServlet] at io.quarkus.arc.processor.BeanDeployment.processErrors(BeanDeployment.java:841) at io.quarkus.arc.processor.BeanDeployment.init(BeanDeployment.java:214) at io.quarkus.arc.processor.BeanProcessor.initialize(BeanProcessor.java:106) at io.quarkus.arc.deployment.ArcProcessor.validate(ArcProcessor.java:249) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at io.quarkus.deployment.ExtensionLoader$1.execute(ExtensionLoader.java:780) at io.quarkus.builder.BuildContext.run(BuildContext.java:415) at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2011) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1535) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1426) at java.lang.Thread.run(Thread.java:748) at org.jboss.threads.JBossThread.run(JBossThread.java:479) Caused by: javax.enterprise.inject.UnsatisfiedResolutionException: Unsatisfied dependency for type org.jboss.as.quickstarts.helloworld.HelloService and qualifiers [@Default] - java member: org.jboss.as.quickstarts.helloworld.HelloWorldServlet#helloService - declared on CLASS bean [types=[javax.servlet.ServletConfig, java.io.Serializable, org.jboss.as.quickstarts.helloworld.HelloWorldServlet, javax.servlet.GenericServlet, javax.servlet.Servlet, java.lang.Object, javax.servlet.http.HttpServlet], qualifiers=[@Default, @Any], target=org.jboss.as.quickstarts.helloworld.HelloWorldServlet] at io.quarkus.arc.processor.Beans.resolveInjectionPoint(Beans.java:428) at io.quarkus.arc.processor.BeanInfo.init(BeanInfo.java:371) at io.quarkus.arc.processor.BeanDeployment.init(BeanDeployment.java:206) ... 14 more &lt;/pre&gt; &lt;p&gt;It failed. Why? What happened?&lt;/p&gt; &lt;p&gt;The &lt;code&gt;UnsatisfiedResolutionException&lt;/code&gt; exception refers to the &lt;code&gt;HelloService&lt;/code&gt; class, which is a member of the &lt;code&gt;HelloWorldServlet&lt;/code&gt; class (&lt;code&gt;java member: org.jboss.as.quickstarts.helloworld.HelloWorldServlet#helloService&lt;/code&gt;). The problem is that &lt;code&gt;HelloWorldServlet&lt;/code&gt; needs an injected instance of &lt;code&gt;HelloService&lt;/code&gt;, but it can not be found (even if the two classes are in the very same package).&lt;/p&gt; &lt;p&gt;It&amp;#8217;s time to return to &lt;a href="https://quarkus.io/guides/" target="_blank" rel="noopener noreferrer"&gt;Quarkus guides&lt;/a&gt; to leverage the documentation and understand how &lt;code&gt;@Inject&lt;/code&gt;—and hence Contexts and Dependency Injection (CDI)—works in Quarkus, thanks to the &lt;a href="https://quarkus.io/guides/cdi-reference" target="_blank" rel="noopener noreferrer"&gt;Contexts and Dependency Injection&lt;/a&gt; guide. In the &lt;a href="https://quarkus.io/guides/cdi-reference#bean_discovery" target="_blank" rel="noopener noreferrer"&gt;Bean Discovery&lt;/a&gt; paragraph, it says, &amp;#8220;Bean classes that don’t have a bean defining annotation are not discovered.&amp;#8221;&lt;/p&gt; &lt;p&gt;Looking at the &lt;code&gt;HelloService&lt;/code&gt; class, it&amp;#8217;s clear there&amp;#8217;s no bean defining annotation, and one has to be added to have Quarkus to discover the bean. So, because it&amp;#8217;s a stateless object, it&amp;#8217;s safe to add the &lt;code&gt;@ApplicationScoped&lt;/code&gt; annotation:&lt;/p&gt; &lt;pre&gt;@ApplicationScoped public class HelloService { &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;The IDE should prompt you to add the required package shown here (add it manually if need be):&lt;/p&gt; &lt;pre&gt;import javax.enterprise.context.ApplicationScoped; &lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re in doubt about which scope to apply when the original bean has no scope defined, please refer to the &lt;a href="https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#default_scope" target="_blank" rel="noopener noreferrer"&gt;JSR 365: Contexts and Dependency Injection for Java 2.0—Default scope&lt;/a&gt; documentation.&lt;/p&gt; &lt;p&gt;Now, try again to run the application, executing again the &lt;code&gt;./mvnw compile quarkus:dev&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ ./mvnw compile quarkus:dev [INFO] Scanning for projects... [INFO] [INFO] ----------------&amp;#60; org.jboss.eap.quickstarts:helloworld &amp;#62;---------------- [INFO] Building Quickstart: helloworld quarkus [INFO] --------------------------------[ war ]--------------------------------- [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ helloworld --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 2 resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ helloworld --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 2 source files to /home/mrizzi/git/forked/jboss-eap-quickstarts/helloworld/target/classes [INFO] [INFO] --- quarkus-maven-plugin:0.23.2:dev (default-cli) @ helloworld --- Listening for transport dt_socket at address: 5005 INFO [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation INFO [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 576ms INFO [io.quarkus] (main) Quarkus 0.23.2 started in 1.083s. Listening on: http://0.0.0.0:8080 INFO [io.quarkus] (main) Profile dev activated. Live Coding activated. INFO [io.quarkus] (main) Installed features: [cdi] &lt;/pre&gt; &lt;p&gt;This time the application runs successfully.&lt;/p&gt; &lt;h3 id="try-the-modernized-helloworld"&gt;Run the modernized &lt;code&gt;helloworld&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;As the terminal log suggests, open a browser to &lt;code&gt;http://0.0.0.0:8080&lt;/code&gt;(the default Quarkus landing page), and the page shown in Figure 4 appears:&lt;/p&gt; &lt;div id="attachment_642837" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-642837" class="wp-image-642837 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-landing-page-1024x644.png" alt="The Quarkus dev landing page." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-landing-page-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-landing-page-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-landing-page-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-landing-page.png 1316w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-642837" class="wp-caption-text"&gt;&lt;em&gt;Figure 4: The Quarkus dev landing page.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This application has the following context&amp;#8217;s definition in the &lt;code&gt;WebServlet&lt;/code&gt; annotation:&lt;/p&gt; &lt;pre&gt;@WebServlet("/HelloWorld") public class HelloWorldServlet extends HttpServlet { &lt;/pre&gt; &lt;p&gt;Hence, you can browse to &lt;code&gt;http://0.0.0.0:8080/HelloWorld&lt;/code&gt;to reach the page shown in Figure 5:&lt;/p&gt; &lt;div id="attachment_642857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-642857" class="wp-image-642857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-world-1024x644.png" alt="The Quarkus dev Hello World page." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-world-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-world-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-world-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-world.png 1316w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-642857" class="wp-caption-text"&gt;&lt;em&gt;Figure 5: The Quarkus dev Hello World page.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;p&gt;It works!&lt;/p&gt; &lt;h3 id="make-some-changes"&gt;Make changes&lt;/h3&gt; &lt;p&gt;Please, pay attention to the fact that the &lt;code&gt;./mvnw compile quarkus:dev&lt;/code&gt; command is still running, and we&amp;#8217;re not going to stop it. Now, try to apply the same—very trivial—change to the code and see how Quarkus improves the developer experience:&lt;/p&gt; &lt;pre&gt;writer.println("&amp;#60;h1&amp;#62;" + helloService.createHelloMessage("Marco") + "&amp;#60;/h1&amp;#62;");&lt;/pre&gt; &lt;p&gt;Save the file, and then refresh the web page to check that &lt;code&gt;Hello Marco&lt;/code&gt; appears, as shown in Figure 6:&lt;/p&gt; &lt;div id="attachment_647397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-647397" class="wp-image-647397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-marco-1024x644.png" alt="The Quarkus dev Hello Marco page." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-marco-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-marco-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-marco-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/10/quarkus-dev-hello-marco.png 1316w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-647397" class="wp-caption-text"&gt;&lt;em&gt;Figure 6: The Quarkus dev Hello Marco page.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Take time to check the terminal output:&lt;/p&gt; &lt;pre&gt;INFO [io.qua.dev] (vert.x-worker-thread-3) Changed source files detected, recompiling [/home/mrizzi/git/forked/jboss-eap-quickstarts/helloworld/src/main/java/org/jboss/as/quickstarts/helloworld/HelloWorldServlet.java] INFO [io.quarkus] (vert.x-worker-thread-3) Quarkus stopped in 0.003s INFO [io.qua.dep.QuarkusAugmentor] (vert.x-worker-thread-3) Beginning quarkus augmentation INFO [io.qua.dep.QuarkusAugmentor] (vert.x-worker-thread-3) Quarkus augmentation completed in 232ms INFO [io.quarkus] (vert.x-worker-thread-3) Quarkus 0.23.2 started in 0.257s. Listening on: http://0.0.0.0:8080 INFO [io.quarkus] (vert.x-worker-thread-3) Profile dev activated. Live Coding activated. INFO [io.quarkus] (vert.x-worker-thread-3) Installed features: [cdi] INFO [io.qua.dev] (vert.x-worker-thread-3) Hot replace total time: 0.371s &lt;/pre&gt; &lt;p&gt;Refreshing the page triggered the source code change detection and the Quarkus automagic &amp;#8220;stop-and-start.&amp;#8221; All of this executed in just 0.371 seconds (that&amp;#8217;s part of the Quarkus &amp;#8220;Supersonic Subatomic Java&amp;#8221; experience).&lt;/p&gt; &lt;h3 id="build-the-helloworld-packaged-jar"&gt;Build the &lt;code&gt;helloworld&lt;/code&gt; packaged JAR&lt;/h3&gt; &lt;p&gt;Now that the code works as expected, it can be packaged using the command:&lt;/p&gt; &lt;pre&gt;$ ./mvnw clean package&lt;/pre&gt; &lt;p&gt;This command creates two JARs in the &lt;code&gt;/target&lt;/code&gt; folder. The first is &lt;code&gt;helloworld-&amp;#60;version&amp;#62;.jar&lt;/code&gt;, which is the standard artifact built from the Maven command with the project&amp;#8217;s classes and resources. The second is &lt;code&gt;helloworld-&amp;#60;version&amp;#62;-runner.jar&lt;/code&gt;, which is an executable JAR.&lt;/p&gt; &lt;p&gt;Please pay attention to the fact that this is not an &lt;em&gt;uber-jar&lt;/em&gt;, because all of the dependencies are copied into the &lt;code&gt;/target/lib&lt;/code&gt; folder (and not bundled within the JAR). Hence, to run this JAR in another location or host, both the JAR file and the libraries in the &lt;code&gt;/lib&lt;/code&gt; folder have to be copied, considering that the &lt;code&gt;Class-Path&lt;/code&gt; entry of the &lt;code&gt;MANIFEST.MF&lt;/code&gt; file in the JAR explicitly lists the JARs from the &lt;code&gt;lib&lt;/code&gt; folder.&lt;/p&gt; &lt;p&gt;To create an &lt;em&gt;uber-jar&lt;/em&gt; application, please refer to the &lt;a href="https://quarkus.io/guides/maven-tooling#uber-jar-maven" target="_blank" rel="noopener noreferrer"&gt;Uber-Jar Creation&lt;/a&gt; Quarkus guide.&lt;/p&gt; &lt;h3 id="run-the-helloworld-packaged-jar"&gt;Run the &lt;code&gt;helloworld&lt;/code&gt; packaged JAR&lt;/h3&gt; &lt;p&gt;Now, the packaged JAR can be executed using the standard &lt;code&gt;java&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ java -jar ./target/helloworld-&lt;b&gt;&amp;#60;version&amp;#62;&lt;/b&gt;-runner.jar INFO [io.quarkus] (main) Quarkus 0.23.2 started in 0.673s. Listening on: http://0.0.0.0:8080 INFO [io.quarkus] (main) Profile prod activated. INFO [io.quarkus] (main) Installed features: [cdi] &lt;/pre&gt; &lt;p&gt;As done above, open the &lt;code&gt;http://0.0.0.0:8080&lt;/code&gt; URL in a browser, and test that everything works.&lt;/p&gt; &lt;h3 id="build-the-helloworld-quickstart-native-executable"&gt;Build the &lt;code&gt;helloworld&lt;/code&gt; quickstart-native executable&lt;/h3&gt; &lt;p&gt;So far so good. The &lt;code&gt;helloworld&lt;/code&gt; quickstart ran as a standalone Java application using Quarkus dependencies, but more can be achieved by adding a further step to the modernization path: Build a native executable.&lt;/p&gt; &lt;h4 id="install-graalvm"&gt;Install GraalVM&lt;/h4&gt; &lt;p&gt;First of all, the tools for creating the native executable have to be installed:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download GraalVM 19.2.0.1 from &lt;a href="https://github.com/oracle/graal/releases/tag/vm-19.2.0.1" target="_blank" rel="noopener noreferrer"&gt;https://github.com/oracle/graal/releases/tag/vm-19.2.0.1&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Untar the file using the command:&lt;/li&gt; &lt;/ol&gt; &lt;p style="padding-left: 40px;"&gt;&lt;code&gt;$ tar xvzf graalvm-ce-linux-amd64-19.2.0.1.tar.gz&lt;/code&gt;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;Go to the &lt;code&gt;untar&lt;/code&gt; folder.&lt;/li&gt; &lt;li&gt;Execute the following to download and add the native image component:&lt;/li&gt; &lt;/ol&gt; &lt;p style="padding-left: 40px;"&gt;&lt;code&gt;$ ./bin/gu install native-image&lt;/code&gt;&lt;/p&gt; &lt;ol start="5"&gt; &lt;li&gt;Set the &lt;code&gt;GRAALVM_HOME&lt;/code&gt; environment variable to the folder created in step two, for example:&lt;/li&gt; &lt;/ol&gt; &lt;p style="padding-left: 40px;"&gt;&lt;code&gt;$ export GRAALVM_HOME={untar-folder}/graalvm-ce-19.2.0.1&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;More details and install instructions for other operating systems are available in &lt;a href="https://quarkus.io/guides/building-native-image-guide.html#prerequisites" target="_blank" rel="noopener noreferrer"&gt;Building a Native Executable—Prerequisites&lt;/a&gt; Quarkus guide.&lt;/p&gt; &lt;h4 id="build-the-helloworld-native-executable"&gt;Build the &lt;code&gt;helloworld&lt;/code&gt; native executable&lt;/h4&gt; &lt;p&gt;As stated in the &lt;a href="https://quarkus.io/guides/building-native-image-guide.html#producing-a-native-executable" target="_blank" rel="noopener noreferrer"&gt;Building a Native Executable—Producing a native executable&lt;/a&gt; Quarkus guide, &amp;#8220;Let’s now produce a native executable for our application. It improves the startup time of the application and produces a minimal disk footprint. The executable would have everything to run the application including the &amp;#8216;JVM&amp;#8217; (shrunk to be just enough to run the application), and the application.&amp;#8221;&lt;/p&gt; &lt;p&gt;To create the native executable, the Maven &lt;code&gt;native&lt;/code&gt; profile has to be enabled by executing:&lt;/p&gt; &lt;pre&gt;$ ./mvnw package -Pnative&lt;/pre&gt; &lt;p&gt;The build took me about 1:10 minutes and the result is the &lt;code&gt;helloworld-&amp;#60;version&amp;#62;-runner&lt;/code&gt; file in the &lt;code&gt;/target&lt;/code&gt; folder.&lt;/p&gt; &lt;h3 id="run-the-helloworld-native-executable"&gt;Run the &lt;code&gt;helloworld&lt;/code&gt; native executable&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;/target/helloworld-&amp;#60;version&amp;#62;-runner&lt;/code&gt; file created in the previous step. It&amp;#8217;s executable, so running it is easy:&lt;/p&gt; &lt;pre&gt;$ ./target/helloworld-&lt;b&gt;&amp;#60;version&amp;#62;&lt;/b&gt;-runner INFO [io.quarkus] (main) Quarkus 0.23.2 started in 0.006s. Listening on: http://0.0.0.0:8080 INFO [io.quarkus] (main) Profile prod activated. INFO [io.quarkus] (main) Installed features: [cdi] &lt;/pre&gt; &lt;p&gt;As done before, open the &lt;code&gt;http://0.0.0.0:8080&lt;/code&gt; URL in a browser and test that everything is working.&lt;/p&gt; &lt;h2&gt;Next steps&lt;/h2&gt; &lt;p&gt;I believe that this modernization, even of a basic application, is the right way to approach the brownfield application. This way, you can start facing the issues and tackling them to understand and learn how to solve them.&lt;/p&gt; &lt;p&gt;In part two of this series, I&amp;#8217;ll look at how to capture memory consumption data in order to evaluate performance improvements, which is a fundamental part of the modernization process.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#38;linkname=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F07%2Fquarkus-modernize-helloworld-jboss-eap-quickstart-part-1%2F&amp;#038;title=Quarkus%3A%20Modernize%20%E2%80%9Chelloworld%E2%80%9D%20JBoss%20EAP%20quickstart%2C%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2019/11/07/quarkus-modernize-helloworld-jboss-eap-quickstart-part-1/" data-a2a-title="Quarkus: Modernize “helloworld” JBoss EAP quickstart, Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/07/quarkus-modernize-helloworld-jboss-eap-quickstart-part-1/"&gt;Quarkus: Modernize &amp;#8220;helloworld&amp;#8221; JBoss EAP quickstart, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sKhvRGV73T4" height="1" width="1" alt=""/&gt;</content><summary>Quarkus is, in its own words, “Supersonic subatomic Java” and a “Kubernetes native Java stack tailored for GraalVM &amp; OpenJDK HotSpot, crafted from the best of breed Java libraries and standards.” Red Hat JBoss Enterprise Application Platform (JBoss EAP) quickstarts are a good starting point for understanding how to modernize brownfield Java EE 8 applications that run on JBoss EAP. It’s important t...</summary><dc:creator>Marco Rizzi</dc:creator><dc:date>2019-11-07T08:00:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/11/07/quarkus-modernize-helloworld-jboss-eap-quickstart-part-1/</feedburner:origLink></entry><entry><title>Managing JBoss EAP/Wildfly using Jcliff</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6ZCG_iC3-dI/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>Andrew Block</name></author><id>searchisko:content:id:jbossorg_blog-managing_jboss_eap_wildfly_using_jcliff</id><updated>2019-11-06T08:00:51Z</updated><published>2019-11-06T08:00:51Z</published><content type="html">&lt;p&gt;Systems management can be a difficult task. Not only does one need to determine what the end state should be but, more importantly, how to ensure systems attain and remain at this state. Doing so in an automated fashion is just as critical, because there may be a large number of target instances. In regard to enterprise &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; middleware application servers, these instances are typically configured using a set of XML based files. Although these files may be manually configured, most application servers have a command-line based tool or set of tools that abstracts the end user from having to worry about the underlying configuration. WebSphere Liberty includes a variety of tools to manage these resources, whereas &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;JBoss&lt;/a&gt; contains the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.2/html/management_cli_guide/index" target="_blank" rel="noopener noreferrer"&gt;jboss-cli&lt;/a&gt; tool.&lt;/p&gt; &lt;p&gt;Although each tool accomplishes its utilitarian use case as it allows for proper server management, it does fail to adhere to one of the principles of automation and configuration management: idempotence. Ensuring the desired state does not equate to executing the same action with every iteration. Additional intelligence must be introduced. Along with idempotence, another core principle of configuration management is that values be expressed declaratively and stored in a version control system.&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/bserdar/jcliff" target="_blank" rel="noopener noreferrer"&gt;Jcliff&lt;/a&gt; is a Java-based utility that is built on top of the JBoss command-line interface and allows for the desired intent for the server configuration to be expressed declaratively, which in turn can be stored in a version control system. We&amp;#8217;ll provide an overview of the Jcliff utility including inherent benefits, installation options, and several examples showcasing the use.&lt;span id="more-644807"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The problem space&lt;/h2&gt; &lt;p&gt;Before beginning to work with Jcliff, one must be cognizant of the underlying JBoss architecture. The configuration of the JBoss server can be expressed using Dynamic Model Representation (DMR) notation. The following is an example of DMR:&lt;/p&gt; &lt;pre&gt;{ "system-property" =&amp;#62; { "foo" =&amp;#62; "bar", "bah" =&amp;#62; "gah" } } &lt;/pre&gt; &lt;p&gt;The DMR example above describes several Java system properties that will be stored within the JBoss configuration. These properties can be added using the JBoss CLI by executing the following command:&lt;/p&gt; &lt;pre&gt;/system-property=foo:add(value=bar) /system-property=bah:add(value=gah) &lt;/pre&gt; &lt;p&gt;The challenge is that the same commands cannot be executed more than once. Otherwise, an error similar to the following is produced.&lt;/p&gt; &lt;pre&gt;{ "outcome" =&amp;#62; "failed", "failure-description" =&amp;#62; "WFLYCTL0212: Duplicate resource [(\"system-property\" =&amp;#62; \"foo\")]", "rolled-back" =&amp;#62; true } &lt;/pre&gt; &lt;p&gt;Where Jcliff excels is that it includes the necessary intelligence to determine the current state of the JBoss configuration and then applying the appropriate configurations necessary. This is critical to adopting proper configuration management when working with JBoss.&lt;/p&gt; &lt;h2&gt;Installing Jcliff&lt;/h2&gt; &lt;p&gt;With a baseline understanding of Jcliff, let&amp;#8217;s discuss the methods in which one can obtain the utility. First, Jcliff can be built from source from the &lt;a href="https://github.com/bserdar/jcliff" target="_blank" rel="noopener noreferrer"&gt;project repository&lt;/a&gt;, given that it’s a freely open source project. Alternatively, Jcliff can be installed using popular software packaging tools in each of the primary operating system families.&lt;/p&gt; &lt;h3&gt;Linux (rpm)&lt;/h3&gt; &lt;p&gt;Jcliff can be consumed on a Linux package when capable of consuming an rpm using a package manager.&lt;/p&gt; &lt;p&gt;First, install the yum repository:&lt;/p&gt; &lt;pre&gt;$ cat /etc/yum.repos.d/jcliff.repo [jcliff] baseurl = http://people.redhat.com/~rpelisse/jcliff.yum/ gpgcheck = 0 name = JCliff repository &lt;/pre&gt; &lt;p&gt;Once this repository has been added, JCliff can be installed by using &lt;a href="http://yum.baseurl.org/" target="_blank" rel="noopener noreferrer"&gt;Yum&lt;/a&gt; or &lt;a href="https://fedoraproject.org/wiki/DNF?rd=Dnf" target="_blank" rel="noopener noreferrer"&gt;Dnf&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;Using yum:&lt;/p&gt; &lt;pre&gt;$ sudo yum install jcliff &lt;/pre&gt; &lt;p&gt;Or using dnf:&lt;/p&gt; &lt;pre&gt;$ sudo dnf install jcliff &lt;/pre&gt; &lt;h3&gt;Manual installation&lt;/h3&gt; &lt;p&gt;Jcliff can also be installed manually without the need to leverage a package manager. This is useful for those on Linux distributions that cannot consume rpm packages. Simply download and unpack the archive from the &lt;a href="https://github.com/bserdar/jcliff/releases/download/v2.12.1/jcliff-2.12.1-dist.tar.gz" target="_blank" rel="noopener noreferrer"&gt;release artifact&lt;/a&gt; from the project repository.&lt;/p&gt; &lt;pre&gt;$ curl -O \ https://github.com/bserdar/jcliff/releases/download/v2.12.1/jcliff-2.12.1-dist.tar.gz $ tar xzvf jcliff-2.12.1-dist.tar.gz &lt;/pre&gt; &lt;p&gt;Place the resulting Jcliff folder in the destination of your choosing. This location is known as JCLIFF_HOME. Add this environment variable and add it to the path as described below:&lt;/p&gt; &lt;pre&gt;$ export JCLIFF_HOME=/path/to/jcliff-2.12.1/ $ export PATH=${JCLIFF_HOME}/bin:${PATH} &lt;/pre&gt; &lt;p&gt;At this point, you should be able to execute the jcliff command.&lt;/p&gt; &lt;h3&gt;OSX&lt;/h3&gt; &lt;p&gt;While users on OSX can take advantage of the manual installation option, those making use of the brew package manager can use this tool as well.&lt;/p&gt; &lt;p&gt;Execute the following commands to install Jcliff using Brew:&lt;/p&gt; &lt;pre&gt;$ brew tap redhat-cop/redhat-cop $ brew install redhat-cop/redhat-cop/jcliff &lt;/pre&gt; &lt;h3&gt;Windows&lt;/h3&gt; &lt;p&gt;Fear not, Windows users; you can also make use of Jcliff without having to compile from source. Windows, in the same vein as OSX, does not have an official package manager, but &lt;a href="https://chocolatey.org/" target="_blank" rel="noopener noreferrer"&gt;Chocolatey&lt;/a&gt; has been given this role.&lt;/p&gt; &lt;p&gt;Execute the following command to install Jcliff using Chocolatey:&lt;/p&gt; &lt;pre&gt;$ choco install jcliff &lt;/pre&gt; &lt;h2&gt;Using Jcliff&lt;/h2&gt; &lt;p&gt;With Jcliff properly installed on your machine, let’s walk through a simple example to demonstrate the use of the tool. As discussed previously, Jcliff makes use of files that describe the target configuration. At this point, you may have questions like: What is the format of these configurations, and where do I begin?&lt;/p&gt; &lt;p&gt;Let’s take a simple example and look into adding a new system property to the JBoss configuration. Launch an instance of JBoss and connect using the JBoss command-line interface:&lt;/p&gt; &lt;pre&gt;$ /bin/jboss-cli.sh --connect [standalone@localhost:9990 /] ls /system-property [standalone@localhost:9990 /] &lt;/pre&gt; &lt;p&gt;Now, use Jcliff to update the configuration. First, we’ll need to create a Jcliff rule. The rule resembles DMR format and appears similar to the following:&lt;/p&gt; &lt;pre&gt;$ cat jcliff-prop { "system-property" =&amp;#62; { "jcliff.enabled" =&amp;#62; "true", } } &lt;/pre&gt; &lt;p&gt;Then we can simply ask JCliff to run this script against our JBoss server:&lt;/p&gt; &lt;pre&gt;$ jcliff jcliff-prop Jcliff version 2.12.4 2019-10-02 17:03:40:0008: /core-service=platform-mbean/type=runtime:read-attribute(name=system-properties) 2019-10-02 17:03:41:0974: /system-property=jcliff.enabled:add(value="true") &lt;/pre&gt; &lt;p&gt;Use the JBoss CLI to verify the changes have been applied.&lt;/p&gt; &lt;pre&gt;$ “${JBOSS_HOME}/bin/jboss-cli.sh” --connect --command=/system-property=jcliff.enabled:read-resource { "outcome" =&amp;#62; "success", "result" =&amp;#62; {"value" =&amp;#62; "true"} } &lt;/pre&gt; &lt;p&gt;To demonstrate how Jcliff handles repetitive executions, run the previous Jcliff command again. Inspect the output.&lt;/p&gt; &lt;pre&gt;$ jcliff jcliff-prop Jcliff version 2.12.4 2019-10-02 17:05:34:0107: /core-service=platform-mbean/type=runtime:read-attribute(name=system-properties) &lt;/pre&gt; &lt;p&gt;Notice that only 1 command was executed against the JBoss server instead of two? This action was a result of assessing the current state within JBoss and determining that no action was necessary to reach the desired state. Mission accomplished.&lt;/p&gt; &lt;h2&gt;Next steps&lt;/h2&gt; &lt;p&gt;Although the preceding scenario was not overly complex, you should now have the knowledge necessary to understand the capabilities and functionality of the Jcliff utility as well as the benefits afforded through declarative configurations and automation. When building out enterprise-grade systems, however, Jcliff would not be executed manually. You would want to integrate the utility into a proper configuration management tool that employs many of the automation and configuration principles described earlier. Fortunately, Jcliff has been integrated into several popular configuration management tools.&lt;/p&gt; &lt;p&gt;In an upcoming article, we&amp;#8217;ll provide an overview of the configuration management options available with Jcliff, along with examples that will allow you to quickly build out enterprise-grade confidence with Jcliff.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#38;linkname=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F06%2Fmanaging-jboss-eap-wildfly-using-jcliff%2F&amp;#038;title=Managing%20JBoss%20EAP%2FWildfly%20using%20Jcliff" data-a2a-url="https://developers.redhat.com/blog/2019/11/06/managing-jboss-eap-wildfly-using-jcliff/" data-a2a-title="Managing JBoss EAP/Wildfly using Jcliff"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/06/managing-jboss-eap-wildfly-using-jcliff/"&gt;Managing JBoss EAP/Wildfly using Jcliff&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6ZCG_iC3-dI" height="1" width="1" alt=""/&gt;</content><summary>Systems management can be a difficult task. Not only does one need to determine what the end state should be but, more importantly, how to ensure systems attain and remain at this state. Doing so in an automated fashion is just as critical, because there may be a large number of target instances. In regard to enterprise Java middleware application servers, these instances are typically configured ...</summary><dc:creator>Andrew Block</dc:creator><dc:date>2019-11-06T08:00:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/11/06/managing-jboss-eap-wildfly-using-jcliff/</feedburner:origLink></entry><entry><title>Red Hat Forum Poland - Keynote and 3 Ptifall Sessions (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vgstGxZdeBI/red-hat-forum-poland-2019-keynote-and-3-pitfalls-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_forum_poland_keynote_and_3_ptifall_sessions_slides</id><updated>2019-11-05T12:46:06Z</updated><published>2019-11-05T12:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/global-forums-2019" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="red hat forum" border="0" data-original-height="518" data-original-width="1600" height="103" src="https://1.bp.blogspot.com/-RP359dswVEk/XYHmsHC2RDI/AAAAAAAAvNs/dNUtL3aUuK06u1zh2YQdt1TmasWHGe9UACNcBGAsYHQ/s320/Screenshot%2B2019-09-18%2Bat%2B10.11.11.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;This week in Warsaw, Poland we entertained around a thousand attendees at the &lt;a href="https://www.schabell.org/2019/09/red-hat-forum-poland-keynote-and-journey-through-3-pitfalls.html" target="_blank"&gt;National Stadium for the Red Hat Forum Poland 2019&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;For the keynote we had around 700 attendees in the main stage area and they were even lined up along the back and sides of the room. The turnout was exceptional.&lt;br /&gt;&lt;br /&gt;Along with keynoting, we interacted with attendees on sessions covering the pitfalls of microservice and hybrid multicloud transitions for organizations.&lt;br /&gt;&lt;br /&gt;Below you'll find the slides for each session.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: center;"&gt;Red Hat Open Hybrid Cloud&lt;/h3&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/sVcwzhHQxBLEwM" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: center;"&gt;3 Pitfalls Everyone Ignores with Microservices&lt;/h3&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/IZjLTWCWHkMPjF" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: center;"&gt;3 Pitfalls Everyone Should Avoid with Hybrid Multicloud&lt;/h3&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/DDiYN5dgIzOqzz" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Here are some images from the event in Warsaw:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-QeVZJX7BTgU/XcFuKjcH6bI/AAAAAAAABlA/eSSauX3Isfo5-TH0WAbzEuC7wq7jh45nwCLcBGAsYHQ/s1600/IMG_2731.jpeg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="617" data-original-width="1600" height="244" src="https://1.bp.blogspot.com/-QeVZJX7BTgU/XcFuKjcH6bI/AAAAAAAABlA/eSSauX3Isfo5-TH0WAbzEuC7wq7jh45nwCLcBGAsYHQ/s640/IMG_2731.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9WLzMKF8FMQ/XcFubbhdI-I/AAAAAAAABlU/kMNMdZOC_Mg0zDyPSWMi3RfZRNiLfUhNQCLcBGAsYHQ/s1600/IMG_2728.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1200" data-original-width="1600" height="480" src="https://1.bp.blogspot.com/-9WLzMKF8FMQ/XcFubbhdI-I/AAAAAAAABlU/kMNMdZOC_Mg0zDyPSWMi3RfZRNiLfUhNQCLcBGAsYHQ/s640/IMG_2728.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-AY8OCWUCLDc/XcFuZiJWHyI/AAAAAAAABlE/BKNJVR7j_HwbcaGrLVJ81lJafGJ_aZOlACEwYBhgL/s1600/IMG_2724.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1200" data-original-width="1600" height="480" src="https://1.bp.blogspot.com/-AY8OCWUCLDc/XcFuZiJWHyI/AAAAAAAABlE/BKNJVR7j_HwbcaGrLVJ81lJafGJ_aZOlACEwYBhgL/s640/IMG_2724.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-X4YF4rc_WnY/XcFuavIIJlI/AAAAAAAABlI/topo1OjPC8sxYSjfi9fQDOdBuaQ9AX4lACEwYBhgL/s1600/IMG_2722.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1200" data-original-width="1600" height="480" src="https://1.bp.blogspot.com/-X4YF4rc_WnY/XcFuavIIJlI/AAAAAAAABlI/topo1OjPC8sxYSjfi9fQDOdBuaQ9AX4lACEwYBhgL/s640/IMG_2722.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-QEhwDIyXPXc/XcFu9k0BGCI/AAAAAAAABls/uKDlk9sPy1kF7xXHgMil-0xT3nWko-n7gCLcBGAsYHQ/s1600/8AF1B0D7-3CBE-4A17-A530-D6E470FE5450.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1440" data-original-width="1440" height="640" src="https://1.bp.blogspot.com/-QEhwDIyXPXc/XcFu9k0BGCI/AAAAAAAABls/uKDlk9sPy1kF7xXHgMil-0xT3nWko-n7gCLcBGAsYHQ/s640/8AF1B0D7-3CBE-4A17-A530-D6E470FE5450.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/--wgBjUdsXWA/XcFu9JOUqeI/AAAAAAAABlo/mclGpppQZDUN2MNyyEKMrekUxrNwBzC7wCLcBGAsYHQ/s1600/83BBFDCD-DB97-4161-83D5-4A39C3F65B26.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1440" data-original-width="1440" height="640" src="https://1.bp.blogspot.com/--wgBjUdsXWA/XcFu9JOUqeI/AAAAAAAABlo/mclGpppQZDUN2MNyyEKMrekUxrNwBzC7wCLcBGAsYHQ/s640/83BBFDCD-DB97-4161-83D5-4A39C3F65B26.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-BvXbNc1iAL8/XcFu95NH7JI/AAAAAAAABlw/RaC_XEPQ2FMUVmZffArhTIFICK2-qt4vACLcBGAsYHQ/s1600/E3F22138-D7C5-4F0A-8BD0-E5639A36FCFC.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1600" data-original-width="1600" height="640" src="https://1.bp.blogspot.com/-BvXbNc1iAL8/XcFu95NH7JI/AAAAAAAABlw/RaC_XEPQ2FMUVmZffArhTIFICK2-qt4vACLcBGAsYHQ/s640/E3F22138-D7C5-4F0A-8BD0-E5639A36FCFC.jpeg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Thanks for all that joined us and attended these sessions!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Bj3Btfi9ldE:xa6hzkxCmDs:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Bj3Btfi9ldE:xa6hzkxCmDs:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Bj3Btfi9ldE:xa6hzkxCmDs:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Bj3Btfi9ldE:xa6hzkxCmDs:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Bj3Btfi9ldE:xa6hzkxCmDs:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/Bj3Btfi9ldE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vgstGxZdeBI" height="1" width="1" alt=""/&gt;</content><summary>This week in Warsaw, Poland we entertained around a thousand attendees at the National Stadium for the Red Hat Forum Poland 2019. For the keynote we had around 700 attendees in the main stage area and they were even lined up along the back and sides of the room. The turnout was exceptional. Along with keynoting, we interacted with attendees on sessions covering the pitfalls of microservice and hyb...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-11-05T12:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Bj3Btfi9ldE/red-hat-forum-poland-2019-keynote-and-3-pitfalls-slides.html</feedburner:origLink></entry><entry><title>OpenShift Developer experience feedback: Take the survey, join community sessions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_MhPyWxaSr4/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="odo" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Steve Speicher</name></author><id>searchisko:content:id:jbossorg_blog-openshift_developer_experience_feedback_take_the_survey_join_community_sessions</id><updated>2019-11-05T08:00:25Z</updated><published>2019-11-05T08:00:25Z</published><content type="html">&lt;p&gt;We’ve recently added several feedback loops aimed at increasing customer and community involvement in order to better understand how developers create, build, manage, test, and deploy their applications on and for &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;2019 OpenShift Developer Survey&lt;/h2&gt; &lt;p&gt;This short survey is intended for Developers who interact with OpenShift in some form or someone who can represent them, such as manager or team lead.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/2klAGZt"&gt;Take the survey now&lt;/a&gt; (Survey ends November 23.)&lt;/strong&gt;&lt;span id="more-645617"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The results of this survey will help us better understand how developers are working with OpenShift—what works and what doesn&amp;#8217;t—as well as what primary technologies developers are using. Getting plenty of survey results helps ensure that we can properly focus on key areas.&lt;/p&gt; &lt;p&gt;Thanks in advance for taking this ~7-minute survey or getting your developers to take it. We expect to conclude the survey on November 23, 2019.&lt;/p&gt; &lt;h3&gt;odo office hours&lt;/h3&gt; &lt;p&gt;The odo team hosts a live office hours session every 2 weeks to enable a more real-time way for users to provide feedback, get help, or even learn a new trick or two. The office hour schedule is posted to &lt;a href="https://groups.google.com/forum/#!forum/odo-users"&gt;odo-users mailing list&lt;/a&gt;. Of course, you can always reach out to the team any time through other channels lists on the project home page at &lt;a href="https://github.com/openshift/odo"&gt;https://github.com/openshift/odo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Upcoming schedule: &lt;a href="https://calendar.google.com/calendar/b/1?cid=cmVkaGF0LmNvbV9vcmRjYTRpaTlwcTV2YmFiMzFoMnY5bGdnMEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t"&gt;see Google calendar link&lt;/a&gt;&lt;/p&gt; &lt;p&gt;What is odo, you ask? It is a new developer-focused command-line interface in OpenShift 4.2. You can learn more in &lt;a href="https://developers.redhat.com/blog/2019/10/16/openshift-do-odo-developer-cli-openshift/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;OpenShift Console Developer Perspective office hours&lt;/h3&gt; &lt;p&gt;The web console team that focuses on the developer perspective hosts live office hours every 2 weeks to enable a more real-time way for users to provide feedback, get help, or even learn a new trick or two. The office hour schedule is posted to the &lt;a href="https://groups.google.com/forum/#!forum/openshift-dev-users"&gt;openshift-dev-users mailing list&lt;/a&gt;. Of course, you can always reach out to the team any time through other channels lists on the project home page at &lt;a href="https://github.com/openshift/console"&gt;https://github.com/openshift/console&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Upcoming schedule: &lt;a href="https://calendar.google.com/calendar/b/1?cid=cmVkaGF0LmNvbV9vcmRjYTRpaTlwcTV2YmFiMzFoMnY5bGdnMEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t"&gt;see Google calendar link&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you haven’t seen the new developer perspective in OpenShift 4.2 web console, be sure to check out &lt;a href="https://developers.redhat.com/blog/2019/10/16/openshift-developer-perspective/"&gt;this overview&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Summary&lt;/h3&gt; &lt;p&gt;We are very interested in learning how developers work with Red Hat OpenShift. You can monitor the various open source projects referenced to track progress on experience improvements and possible schedule changes. Be on the lookout in early 2020 for an article summarizing the survey results and discussing what we plan on doing with them.&lt;/p&gt; &lt;p&gt;Thanks in advance for your feedback and for helping us making these tools better for you.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/2klAGZt"&gt;Take the survey now&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#38;linkname=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F11%2F05%2Fopenshift-developer-experience-feedback-take-the-survey-join-community-sessions%2F&amp;#038;title=OpenShift%20Developer%20experience%20feedback%3A%20Take%20the%20survey%2C%20join%20community%20sessions" data-a2a-url="https://developers.redhat.com/blog/2019/11/05/openshift-developer-experience-feedback-take-the-survey-join-community-sessions/" data-a2a-title="OpenShift Developer experience feedback: Take the survey, join community sessions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/11/05/openshift-developer-experience-feedback-take-the-survey-join-community-sessions/"&gt;OpenShift Developer experience feedback: Take the survey, join community sessions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_MhPyWxaSr4" height="1" width="1" alt=""/&gt;</content><summary>We’ve recently added several feedback loops aimed at increasing customer and community involvement in order to better understand how developers create, build, manage, test, and deploy their applications on and for Red Hat OpenShift. 2019 OpenShift Developer Survey This short survey is intended for Developers who interact with OpenShift in some form or someone who can represent them, such as manage...</summary><dc:creator>Steve Speicher</dc:creator><dc:date>2019-11-05T08:00:25Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/11/05/openshift-developer-experience-feedback-take-the-survey-join-community-sessions/</feedburner:origLink></entry></feed>
